{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../_shared/directives/number-format\";\nimport * as i2 from \"./../../_services/environment-path.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../_shared/directives/number-format\";\n\nfunction MatTableComponent_th_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const col_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", col_r4, \" \");\n  }\n}\n\nfunction MatTableComponent_tr_23_td_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const col_r7 = i0.ɵɵnextContext().$implicit;\n    const row_r5 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", row_r5[col_r7], \" \");\n  }\n}\n\nfunction MatTableComponent_tr_23_td_1_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20)(1, \"div\", 21)(2, \"div\", 22);\n    i0.ɵɵelement(3, \"img\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 24);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"numberFormat\");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const item_r14 = ctx.$implicit;\n    const ctx_r13 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", item_r14.type);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r13.displayRarity ? item_r14.qly : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", item_r14.path, i0.ɵɵsanitizeUrl)(\"alt\", item_r14.name)(\"title\", item_r14.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"x \", i0.ɵɵpipeBind1(6, 6, item_r14.qty), \"\");\n  }\n}\n\nfunction MatTableComponent_tr_23_td_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, MatTableComponent_tr_23_td_1_div_2_div_1_Template, 7, 8, \"div\", 19);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const col_r7 = i0.ɵɵnextContext().$implicit;\n    const row_r5 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r5[col_r7]);\n  }\n}\n\nfunction MatTableComponent_tr_23_td_1_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵtext(1, \"Max\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction MatTableComponent_tr_23_td_1_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵtext(1, \"Shared\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction MatTableComponent_tr_23_td_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, MatTableComponent_tr_23_td_1_div_3_div_1_Template, 2, 0, \"div\", 25);\n    i0.ɵɵtemplate(2, MatTableComponent_tr_23_td_1_div_3_div_2_Template, 2, 0, \"div\", 25);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r5 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !row_r5[\"Name\"].includes(\"Traveler\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", row_r5[\"Name\"].includes(\"Traveler\"));\n  }\n}\n\nfunction MatTableComponent_tr_23_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 17);\n    i0.ɵɵtemplate(1, MatTableComponent_tr_23_td_1_div_1_Template, 2, 1, \"div\", 18);\n    i0.ɵɵtemplate(2, MatTableComponent_tr_23_td_1_div_2_Template, 2, 1, \"div\", 18);\n    i0.ɵɵtemplate(3, MatTableComponent_tr_23_td_1_div_3_Template, 3, 2, \"div\", 18);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const col_r7 = ctx.$implicit;\n    const row_r5 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", col_r7 === \"Name\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", col_r7 !== \"Name\" && row_r5[col_r7].length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", col_r7 !== \"Name\" && row_r5[col_r7].length === 0);\n  }\n}\n\nfunction MatTableComponent_tr_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, MatTableComponent_tr_23_td_1_Template, 4, 3, \"td\", 16);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.displayedColumns);\n  }\n}\n\nfunction MatTableComponent_table_24_th_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const col_r23 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Total \", col_r23, \" \");\n  }\n}\n\nfunction MatTableComponent_table_24_tr_5_td_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20)(1, \"div\", 21)(2, \"div\", 22);\n    i0.ɵɵelement(3, \"img\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 24);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"numberFormat\");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const item_r28 = ctx.$implicit;\n    const ctx_r27 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", item_r28.type);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r27.displayRarity ? item_r28.qly : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", item_r28.path, i0.ɵɵsanitizeUrl)(\"alt\", item_r28.name)(\"title\", item_r28.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"x \", i0.ɵɵpipeBind1(6, 6, item_r28.qty), \"\");\n  }\n}\n\nfunction MatTableComponent_table_24_tr_5_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 17);\n    i0.ɵɵtemplate(1, MatTableComponent_table_24_tr_5_td_1_div_1_Template, 7, 8, \"div\", 19);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const col_r26 = ctx.$implicit;\n    const row_r24 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r24[col_r26]);\n  }\n}\n\nfunction MatTableComponent_table_24_tr_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, MatTableComponent_table_24_tr_5_td_1_Template, 2, 1, \"td\", 16);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r22 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r22.totalColumns);\n  }\n}\n\nfunction MatTableComponent_table_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 11);\n    i0.ɵɵelement(1, \"caption\");\n    i0.ɵɵelementStart(2, \"thead\");\n    i0.ɵɵtemplate(3, MatTableComponent_table_24_th_3_Template, 2, 1, \"th\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"tbody\");\n    i0.ɵɵtemplate(5, MatTableComponent_table_24_tr_5_Template, 2, 1, \"tr\", 13);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r3.displayWeapon ? \"weapon-size\" : \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.totalColumns);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.totalsData);\n  }\n}\n\nexport let MatTableComponent = /*#__PURE__*/(() => {\n  class MatTableComponent {\n    constructor(numberFormat, url) {\n      this.url = url;\n      this.displayedColumns = [\"Name\", \"Exp\", \"Exp Mora\", \"Ascension\", \"Ascension Mora\", \"Talent\", \"Talent Mora\"];\n      this.totalColumns = [\"Exp\", \"Gems\", \"Local Specialties\", \"Common Drops\", \"Domain Drops\", \"Boss Drops\", \"Limited\", \"Mora\"];\n      this.tableData = [];\n      this.totalsData = [];\n      this.path = this.url.getUrl(\"./../../../assets/resources/\", true);\n      this.ascensionLevels = [20, 40, 50, 60, 70, 80];\n      this.displayWeapon = false;\n      this.displayRarity = true;\n      this.displayTotals = true;\n      this.qualityOrder = [\"grey\", \"green\", \"blue\", \"purple\", \"gold\"];\n      this.tagOrder = [\"Mask\", \"Arrowhead\", \"Slime\", \"Scroll\", \"Nectar\", \"Treasure_Hoarder_Insignia\", \"Fatui_Insignia\", \"Branch\", \"Horn\", \"Bone\", \"Knife\", \"Mist_Grass\", \"Chaos\", \"adaptive\", \"Freedom\", \"Resistance\", \"Ballad\", \"Prosperity\", \"Diligence\", \"Gold\", \"pyro\", \"hydro\", \"electro\", \"anemo\", \"cryo\", \"geo\", \"weekly\", \"Decarabian\", \"Fang\", \"Shackle\", \"Guyun\", \"Dango\", \"Aerosiderite\", \"exp\", \"weapon-exp\"];\n      this.numberFormat = numberFormat;\n    }\n\n    ngOnChanges() {\n      if (this.characters == null || this.levelUpData == null || this.ascensionData == null || this.talentData == null || this.charData == null || this.itemQualityData == null || this.weaponData == null || this.weaponLevelUpData == null || this.weaponAscensionData == null) return;\n      if (this.displayWeapon) this.getWeaponTotals();else this.getTotals();\n    }\n    /**\r\n     * Calculates the material requirements and totals for all characters excluding\r\n     * totals for weapons\r\n     */\n\n\n    getTotals() {\n      this.tableData = [];\n      this.totalsData = [];\n      let traveler = false;\n\n      for (let char of this.characters) {\n        if (!char.display) continue;\n        let exp = {\n          exp: [],\n          mora: []\n        };\n        let wExp = {\n          exp: [],\n          mora: []\n        };\n        let ascensions = {\n          items: [],\n          mora: []\n        };\n        let wAscensions = {\n          items: [],\n          mora: []\n        };\n        let talents = this.calcTalent(char.name, char.balevel, char.eslevel, char.eblevel, char.tbalevel, char.teslevel, char.teblevel);\n\n        if (!char.name.includes(\"Traveler\") || !traveler) {\n          if (char.name.includes(\"Traveler\")) traveler = true;\n          exp = this.calcExp(char.level, char.tlevel);\n          ascensions = this.calcAscension(char.name, char.ascension, char.tascension);\n          wExp = this.calcWeaponExp(JSON.parse(JSON.stringify(char.weapon)));\n          wAscensions = this.calcWeaponAscension(JSON.parse(JSON.stringify(char.weapon)));\n        }\n\n        this.tableData.push({\n          \"Name\": char.name,\n          \"Exp\": exp.exp,\n          \"Exp Mora\": exp.exp.length == 0 ? [] : exp.mora,\n          \"Ascension\": ascensions.items,\n          \"Ascension Mora\": ascensions.items.length == 0 ? [] : ascensions.mora,\n          \"Talent\": talents.items,\n          \"Talent Mora\": talents.items.length == 0 ? [] : talents.mora,\n          \"Weapon Exp\": wExp.exp,\n          \"Weapon Exp Mora\": wExp.exp.length == 0 ? [] : wExp.mora,\n          \"Weapon Ascension\": wAscensions.items,\n          \"Weapon Ascension Mora\": wAscensions.items.length == 0 ? [] : wAscensions.mora\n        });\n        this.calcTotals(char);\n      }\n    }\n    /**\r\n     * Calculates the material requirements and totals for all characters including\r\n     * totals for weapons\r\n     */\n\n\n    getWeaponTotals() {\n      this.getTotals();\n\n      for (let char of this.characters) {\n        if (!char.display) continue;\n        this.calcWeaponTotals(char);\n      }\n    }\n    /**\r\n     * Returns the total exp and mora required for level ups\r\n     * @param clevel Current level of character\r\n     * @param tlevel Target level of character\r\n     */\n\n\n    calcExp(clevel, tlevel) {\n      let batch = [];\n\n      for (let i = 0; this.ascensionLevels[i] < tlevel && this.ascensionLevels[i] < 90; i++) {\n        if (clevel > this.ascensionLevels[i]) continue;\n        batch.push({\n          from: clevel,\n          to: this.ascensionLevels[i]\n        });\n        clevel = this.ascensionLevels[i];\n      }\n\n      batch.push({\n        from: clevel,\n        to: tlevel\n      });\n      let cards = [];\n\n      for (let t in this.itemQualityData.exp) {\n        let d = this.itemQualityData.exp[t];\n        cards.push({\n          name: d.name,\n          path: this.path + \"items/\" + d.name + \".png\",\n          qty: 0,\n          exp: d.exp,\n          cost: d.exp / 5,\n          qly: this.displayRarity ? t : \"\"\n        });\n      }\n\n      cards = cards.sort((a, b) => b.exp - a.exp);\n\n      for (let row of batch) {\n        let texp = this.levelUpData[row.to];\n        let cexp = this.levelUpData[row.from];\n        let exp = texp.cumm_exp - cexp.cumm_exp;\n\n        for (let card of cards) {\n          card.qty += Math.floor(exp / card.exp);\n          exp %= card.exp;\n        }\n\n        if (exp > 0) cards[cards.length - 1].qty += 1;\n      }\n\n      cards = cards.sort((a, b) => a.exp - b.exp);\n      return {\n        exp: cards.filter(c => c.qty > 0).map(c => ({\n          name: c.name.replace(/_/g, \" \"),\n          path: c.path,\n          qty: c.qty,\n          qly: c.qly,\n          type: \"item-exp\",\n          tag: \"exp\"\n        })),\n        mora: [{\n          name: \"Mora\",\n          path: this.path + \"items/Mora.png\",\n          qty: cards.map(c => ({\n            cost: c.cost * c.qty\n          })).reduce((s, i) => s + i.cost, 0)\n        }]\n      };\n    }\n    /**\r\n     * Returns the total materials and mora required for ascensions\r\n     * @param char Character name\r\n     * @param cascension Current ascension of character\r\n     * @param tascension Target ascension of character\r\n     */\n\n\n    calcAscension(char, cascension, tascension) {\n      let characterAscensionData = this.charData[char].ascension;\n      let mats = {\n        cost: 0,\n        gem: [],\n        local_specialty: [],\n        common_drop: [],\n        boss_drop: []\n      };\n\n      for (let i = cascension; i < tascension; i++) {\n        let data = JSON.parse(JSON.stringify(this.ascensionData.cost[this.ascensionLevels[i]]));\n        mats.cost += data.cost;\n\n        if (data.gem != null) {\n          let reqs = this.ascensionData.gem[characterAscensionData.element];\n          let gemName = reqs.gem + \"_\" + this.itemQualityData.gem[data.gem.quality];\n          let gemId = mats.gem.findIndex(g => g.name == gemName.replace(/_/g, \" \"));\n          if (gemId == -1) mats.gem.push({\n            name: gemName.replace(/_/g, \" \"),\n            qty: data.gem.quantity,\n            qly: data.gem.quality,\n            path: this.path + \"items/\" + gemName + \".png\",\n            type: \"item-gem\",\n            tag: characterAscensionData.element\n          });else mats.gem[gemId].qty += data.gem.quantity;\n\n          if (data.boss_drop != null && reqs.boss_drop != \"\") {\n            let bossDropName;\n            if (characterAscensionData.hasOwnProperty(\"boss_drop\")) bossDropName = characterAscensionData.boss_drop;else bossDropName = reqs.boss_drop;\n            if (mats.boss_drop.length == 0) mats.boss_drop.push({\n              name: bossDropName == null ? \"Boss drop TBD\" : bossDropName.replace(/_/g, \" \"),\n              qty: data.boss_drop.quantity,\n              qly: \"purple\",\n              path: this.path + (bossDropName == null ? \"tbd.png\" : \"items/\" + bossDropName + \".png\"),\n              type: \"item-boss-drop\",\n              tag: characterAscensionData.element\n            });else mats.boss_drop[0].qty += data.boss_drop.quantity;\n          }\n        }\n\n        if (data.local_specialty != null) {\n          let localSpecialtyName = characterAscensionData.local_specialty;\n          if (mats.local_specialty.length == 0) mats.local_specialty.push({\n            name: localSpecialtyName == null ? \"Local specialty TBD\" : localSpecialtyName.replace(/_/g, \" \"),\n            qty: data.local_specialty.quantity,\n            qly: \"grey\",\n            path: this.path + (localSpecialtyName == null ? \"tbd.png\" : \"items/\" + localSpecialtyName + \".png\"),\n            type: \"item-local-specialty\"\n          });else mats.local_specialty[0].qty += data.local_specialty.quantity;\n        }\n\n        if (data.common_drop != null) {\n          if (characterAscensionData.common_drop == null) {\n            let commonDropId = mats.common_drop.findIndex(c => c.name == data.common_drop.quality.replace(/./, m => {\n              return m.toUpperCase();\n            }) + \" common drop TBD\");\n            if (commonDropId == -1) mats.common_drop.push({\n              name: data.common_drop.quality.replace(/./, m => {\n                return m.toUpperCase();\n              }) + \" common drop TBD\",\n              qty: data.common_drop.quantity,\n              qly: data.common_drop.quality,\n              path: this.path + \"tbd.png\",\n              type: \"item-common-drop\",\n              tag: characterAscensionData.common_drop\n            });else mats.common_drop[commonDropId].qty += data.common_drop.quantity;\n          } else {\n            let commonDropName = this.itemQualityData.common_drop[characterAscensionData.common_drop][data.common_drop.quality];\n            let commonDropId = mats.common_drop.findIndex(c => c.name == commonDropName.replace(/_/g, \" \"));\n            if (commonDropId == -1) mats.common_drop.push({\n              name: commonDropName.replace(/_/g, \" \"),\n              qty: data.common_drop.quantity,\n              qly: data.common_drop.quality,\n              path: this.path + \"items/\" + commonDropName + \".png\",\n              type: \"item-common-drop\",\n              tag: characterAscensionData.common_drop\n            });else mats.common_drop[commonDropId].qty += data.common_drop.quantity;\n          }\n        }\n      }\n\n      return {\n        items: [...mats.gem, ...mats.local_specialty, ...mats.common_drop, ...mats.boss_drop],\n        mora: [{\n          name: \"Mora\",\n          path: this.path + \"items/Mora.png\",\n          qty: mats.cost\n        }]\n      };\n    }\n    /**\r\n     * Returns the total materials and mora required to upgrade talents\r\n     * @param char Character name\r\n     * @c1 Talent 1 current level\r\n     * @c2 Talent 2 current level\r\n     * @c3 Talent 3 current level\r\n     * @t1 Talent 1 target level\r\n     * @t2 Talent 2 target level\r\n     * @t3 Talent 3 target level\r\n     */\n\n\n    calcTalent(char, c1, c2, c3, t1, t2, t3) {\n      let characterTalentData = this.charData[char].talent;\n      let mats = this.talentHandler(characterTalentData, 1, c1, t1);\n      mats = this.talentHandler(characterTalentData, 2, c2, t2, mats);\n      mats = this.talentHandler(characterTalentData, 3, c3, t3, mats);\n      return {\n        items: [...mats.book, ...mats.common_drop, ...mats.boss_drop, ...mats.limited],\n        mora: [{\n          name: \"Mora\",\n          path: this.path + \"items/Mora.png\",\n          qty: mats.cost\n        }]\n      };\n    }\n    /**\r\n     * Calculates talent requirements for specific talent\r\n     * @param charTalent Character talent data\r\n     * @param talentNo The talent number (1, 2 or 3)\r\n     * @param from From talent level\r\n     * @param to To talent level\r\n     */\n\n\n    talentHandler(charTalent, talentNo, from, to, mats = null) {\n      if (mats == null) {\n        mats = {\n          cost: 0,\n          book: [],\n          common_drop: [],\n          boss_drop: [],\n          limited: []\n        };\n      }\n\n      for (let i = from; i < to; i++) {\n        let data = JSON.parse(JSON.stringify(this.talentData[i]));\n        mats.cost = data.cost == null ? data.cost : mats.cost + data.cost;\n\n        if (data.book != null) {\n          let bookName = this.itemQualityData.talent[data.book.quality];\n          let tag = \"\";\n          if (charTalent.hasOwnProperty(\"talent\" + talentNo.toString())) tag = charTalent[\"talent\" + talentNo.toString()][i].book;else tag = charTalent.all.book;\n\n          if (tag == null) {\n            let bookId = mats.book.findIndex(b => b.name == data.book.quality.replace(/./, m => {\n              return m.toUpperCase();\n            }) + \" talent book TBD\");\n            if (bookId == -1) mats.book.push({\n              name: data.book.quality.replace(/./, m => {\n                return m.toUpperCase();\n              }) + \" talent book TBD\",\n              qty: data.book.quantity,\n              qly: data.book.quality,\n              path: this.path + \"tbd.png\",\n              type: \"item-domain\",\n              tag: tag\n            });else mats.book[bookId].qty += data.book.quantity;\n          } else {\n            bookName += tag;\n            let bookId = mats.book.findIndex(b => b.name == bookName.replace(/_/g, \" \"));\n            if (bookId == -1) mats.book.push({\n              name: bookName.replace(/_/g, \" \"),\n              qty: data.book.quantity,\n              qly: data.book.quality,\n              path: this.path + \"talents/\" + bookName + \".png\",\n              type: \"item-domain\",\n              tag: tag\n            });else mats.book[bookId].qty += data.book.quantity;\n          }\n        }\n\n        if (data.common_drop != null) {\n          let commonDropType = \"\";\n          if (charTalent.hasOwnProperty(\"talent\" + talentNo.toString())) commonDropType = charTalent[\"talent\" + talentNo.toString()][i].common_drop;else commonDropType = charTalent.all.common_drop;\n\n          if (commonDropType == null) {\n            let commonDropId = mats.common_drop.findIndex(d => d.name == data.common_drop.quality.replace(/./, m => {\n              return m.toUpperCase();\n            }) + \" common drop TBD\");\n            if (commonDropId == -1) mats.common_drop.push({\n              name: data.common_drop.quality.replace(/./, m => {\n                return m.toUpperCase();\n              }) + \" common drop TBD\",\n              qty: data.common_drop.quantity,\n              qly: data.common_drop.quality,\n              path: this.path + \"tbd.png\",\n              type: \"item-common-drop\",\n              tag: commonDropType\n            });else mats.common_drop[commonDropId].qty += data.common_drop.quantity;\n          } else {\n            let commonDropName = this.itemQualityData.common_drop[commonDropType][data.common_drop.quality];\n            let commonDropId = mats.common_drop.findIndex(d => d.name == commonDropName.replace(/_/g, \" \"));\n            if (commonDropId == -1) mats.common_drop.push({\n              name: commonDropName.replace(/_/g, \" \"),\n              qty: data.common_drop.quantity,\n              qly: data.common_drop.quality,\n              path: this.path + \"items/\" + commonDropName + \".png\",\n              type: \"item-common-drop\",\n              tag: commonDropType\n            });else mats.common_drop[commonDropId].qty += data.common_drop.quantity;\n          }\n        }\n\n        if (data.boss_drop != null) {\n          let bossDropName = \"\";\n          if (charTalent.hasOwnProperty(\"talent\" + talentNo.toString())) bossDropName = charTalent[\"talent\" + talentNo.toString()][i].boss_drop;else bossDropName = charTalent.all.boss_drop;\n\n          if (bossDropName == null) {\n            let bossDropId = mats.boss_drop.findIndex(d => d.name == \"Boss drop TBD\");\n            if (bossDropId == -1) mats.boss_drop.push({\n              name: \"Boss drop TBD\",\n              qty: data.boss_drop.quantity,\n              qly: \"purple\",\n              path: this.path + \"tbd.png\",\n              type: \"item-boss-drop\",\n              tag: \"weekly\"\n            });else mats.boss_drop[bossDropId].qty += data.boss_drop.quantity;\n          } else {\n            let bossDropId = mats.boss_drop.findIndex(d => d.name == bossDropName.replace(/_/g, \" \"));\n            if (bossDropId == -1) mats.boss_drop.push({\n              name: bossDropName.replace(/_/g, \" \"),\n              qty: data.boss_drop.quantity,\n              qly: \"purple\",\n              path: this.path + \"talents/\" + bossDropName + \".png\",\n              type: \"item-boss-drop\",\n              tag: \"weekly\"\n            });else mats.boss_drop[bossDropId].qty += data.boss_drop.quantity;\n          }\n        }\n\n        if (data.limited != null) {\n          let limitedId = mats.limited.findIndex(l => l.name == \"Crown of Insight\");\n          if (limitedId == -1) mats.limited.push({\n            name: \"Crown of Insight\",\n            qty: data.limited.quantity,\n            qly: \"gold\",\n            path: this.path + \"talents/Crown_of_Insight.png\",\n            type: \"item-limited\"\n          });else mats.limited[limitedId].qty += data.limited.quantity;\n        }\n      }\n\n      return mats;\n    }\n    /**\r\n     * Returns the total exp and mora required for weapon level ups\r\n     * @param weapon The weapon object\r\n     */\n\n\n    calcWeaponExp(weapon) {\n      let batch = [];\n      let maxLevel = weapon.rarity < 3 ? 70 : 90;\n\n      for (let i = 0; this.ascensionLevels[i] < weapon.tlevel && this.ascensionLevels[i] < maxLevel; i++) {\n        if (weapon.level > this.ascensionLevels[i]) continue;\n        batch.push({\n          from: weapon.level,\n          to: this.ascensionLevels[i]\n        });\n        weapon.level = this.ascensionLevels[i];\n      }\n\n      batch.push({\n        from: weapon.level,\n        to: weapon.tlevel\n      });\n      let ores = [];\n\n      for (let t in this.itemQualityData.weapon_exp) {\n        let d = this.itemQualityData.weapon_exp[t];\n        ores.push({\n          name: d.name,\n          path: this.path + \"items/\" + d.name + \".png\",\n          qty: 0,\n          exp: d.exp,\n          cost: d.exp / 10,\n          qly: this.displayRarity ? t : \"\"\n        });\n      }\n\n      ores = ores.sort((a, b) => b.exp - a.exp);\n\n      for (let row of batch) {\n        let texp = this.weaponLevelUpData[weapon.rarity][row.to];\n        let cexp = this.weaponLevelUpData[weapon.rarity][row.from];\n        let exp = texp.cumm_exp - cexp.cumm_exp;\n\n        for (let ore of ores) {\n          ore.qty += Math.floor(exp / ore.exp);\n          exp %= ore.exp;\n        }\n\n        if (exp > 0) ores[ores.length - 1].qty += 1;\n      }\n\n      ores = ores.sort((a, b) => a.exp - b.exp);\n      return {\n        exp: ores.filter(c => c.qty > 0).map(c => ({\n          name: c.name.replace(/_/g, \" \"),\n          path: c.path,\n          qty: c.qty,\n          qly: c.qly,\n          type: \"item-exp\",\n          tag: \"weapon-exp\"\n        })),\n        mora: [{\n          name: \"Mora\",\n          path: this.path + \"items/Mora.png\",\n          qty: ores.map(c => ({\n            cost: c.cost * c.qty\n          })).reduce((s, i) => s + i.cost, 0)\n        }]\n      };\n    }\n    /**\r\n     * Returns the total materials and mora required for weapon ascensions\r\n     * @param weapon The weapon object\r\n     */\n\n\n    calcWeaponAscension(weapon) {\n      if (weapon.name == \"\") return {\n        items: [],\n        mora: []\n      };\n      let weaponAscensionData = this.weaponData[weapon.name].ascension;\n      let mats = {\n        cost: 0,\n        domain_drop: [],\n        common_drop: [],\n        rare_drop: []\n      };\n\n      for (let i = weapon.ascension; i < weapon.tascension; i++) {\n        let data = JSON.parse(JSON.stringify(this.weaponAscensionData[weapon.rarity].cost[this.ascensionLevels[i]]));\n        mats.cost += data.cost;\n\n        if (data.domain_drop != null) {\n          if (weaponAscensionData.domain_drop == null) {\n            let domainDropId = mats.domain_drop.findIndex(d => d.name == data.domain_drop.quality.replace(/./, m => {\n              return m.toUpperCase();\n            }) + \" weapon mat TBD\");\n            if (domainDropId == -1) mats.domain_drop.push({\n              name: data.domain_drop.quality.replace(/./, m => {\n                return m.toUpperCase();\n              }) + \" weapon mat TBD\",\n              qty: data.domain_drop.quantity,\n              qly: data.domain_drop.quality,\n              path: this.path + \"tbd.png\",\n              type: \"item-domain\",\n              tag: weaponAscensionData.domain_drop\n            });else mats.domain_drop[domainDropId].qty += data.domain_drop.quantity;\n          } else {\n            let domainDropName = this.itemQualityData.weapon[weaponAscensionData.domain_drop][data.domain_drop.quality];\n            let domainDropId = mats.domain_drop.findIndex(d => d.name == domainDropName.replace(/_/g, \" \"));\n            if (domainDropId == -1) mats.domain_drop.push({\n              name: domainDropName.replace(/_/g, \" \"),\n              qty: data.domain_drop.quantity,\n              qly: data.domain_drop.quality,\n              path: this.path + \"items/\" + domainDropName + \".png\",\n              type: \"item-domain\",\n              tag: weaponAscensionData.domain_drop\n            });else mats.domain_drop[domainDropId].qty += data.domain_drop.quantity;\n          }\n        }\n\n        if (data.common_drop != null) {\n          if (weaponAscensionData.common_drop == null) {\n            let commonDropId = mats.common_drop.findIndex(c => c.name == data.common_drop.quality.replace(/./, m => {\n              return m.toUpperCase();\n            }) + \" common drop TBD\");\n            if (commonDropId == -1) mats.common_drop.push({\n              name: data.common_drop.quality.replace(/./, m => {\n                return m.toUpperCase();\n              }) + \" common drop TBD\",\n              qty: data.common_drop.quantity,\n              qly: data.common_drop.quality,\n              path: this.path + \"tbd.png\",\n              type: \"item-common-drop\",\n              tag: weaponAscensionData.common_drop\n            });else mats.common_drop[commonDropId].qty += data.common_drop.quantity;\n          } else {\n            let commonDropName = this.itemQualityData.common_drop[weaponAscensionData.common_drop][data.common_drop.quality];\n            let commonDropId = mats.common_drop.findIndex(c => c.name == commonDropName.replace(/_/g, \" \"));\n            if (commonDropId == -1) mats.common_drop.push({\n              name: commonDropName.replace(/_/g, \" \"),\n              qty: data.common_drop.quantity,\n              qly: data.common_drop.quality,\n              path: this.path + \"items/\" + commonDropName + \".png\",\n              type: \"item-common-drop\",\n              tag: weaponAscensionData.common_drop\n            });else mats.common_drop[commonDropId].qty += data.common_drop.quantity;\n          }\n        }\n\n        if (data.rare_drop != null) {\n          if (weaponAscensionData.rare_drop == null) {\n            let rareDropId = mats.rare_drop.findIndex(r => r.name == data.rare_drop.quality.replace(/./, m => {\n              return m.toUpperCase();\n            }) + \" rare drop TBD\");\n            if (rareDropId == -1) mats.rare_drop.push({\n              name: data.rare_drop.quality.replace(/./, m => {\n                return m.toUpperCase();\n              }) + \" rare drop TBD\",\n              qty: data.rare_drop.quantity,\n              qly: data.rare_drop.quality,\n              path: this.path + \"tbd.png\",\n              type: \"item-common-drop\",\n              tag: weaponAscensionData.rare_drop\n            });else mats.rare_drop[rareDropId].qty += data.rare_drop.quantity;\n          } else {\n            let rareDropName = this.itemQualityData.common_drop[weaponAscensionData.rare_drop][data.rare_drop.quality];\n            let rareDropId = mats.rare_drop.findIndex(r => r.name == rareDropName.replace(/_/g, \" \"));\n            if (rareDropId == -1) mats.rare_drop.push({\n              name: rareDropName.replace(/_/g, \" \"),\n              qty: data.rare_drop.quantity,\n              qly: data.rare_drop.quality,\n              path: this.path + \"items/\" + rareDropName + \".png\",\n              type: \"item-common-drop\",\n              tag: weaponAscensionData.rare_drop\n            });else mats.rare_drop[rareDropId].qty += data.rare_drop.quantity;\n          }\n        }\n      }\n\n      return {\n        items: [...mats.domain_drop, ...mats.common_drop, ...mats.rare_drop],\n        mora: [{\n          name: \"Mora\",\n          path: this.path + \"items/Mora.png\",\n          qty: mats.cost\n        }]\n      };\n    }\n    /**\r\n     * Toggle values\r\n     * @param item item that requires toggling\r\n     */\n\n\n    toggle(item) {\n      switch (item) {\n        case \"weapon\":\n          this.displayWeapon = !this.displayWeapon;\n\n          if (this.displayWeapon) {\n            this.displayedColumns.push(\"Weapon Exp\");\n            this.displayedColumns.push(\"Weapon Exp Mora\");\n            this.displayedColumns.push(\"Weapon Ascension\");\n            this.displayedColumns.push(\"Weapon Ascension Mora\");\n            this.getWeaponTotals();\n          } else {\n            this.displayedColumns.splice(7, 4);\n            this.totalsData = [];\n\n            for (let char of this.characters) {\n              if (!char.display) continue;\n              this.calcTotals(char);\n            }\n          }\n\n          document.querySelector(\".page\").scrollLeft = 0;\n          break;\n\n        case \"rarity\":\n          this.displayRarity = !this.displayRarity;\n          break;\n\n        case \"totals\":\n          this.displayTotals = !this.displayTotals;\n          break;\n      }\n    }\n    /**\r\n     * Generates the total items required\r\n     * @param char Character for whom the total is being calculated\r\n     */\n\n\n    calcTotals(char) {\n      let rowData = this.tableData.filter(d => d.Name == char.name)[0];\n\n      if (this.totalsData.length == 0) {\n        let commonDropList = JSON.parse(JSON.stringify(rowData[\"Ascension\"].filter(i => i.type == \"item-common-drop\")));\n\n        for (let commonDrop of rowData[\"Talent\"].filter(e => e.type == \"item-common-drop\")) {\n          let commonDropId = commonDropList.findIndex(l => l.name == commonDrop.name);\n\n          if (commonDropId == -1) {\n            commonDropList.push(JSON.parse(JSON.stringify(commonDrop)));\n          } else {\n            commonDropList[commonDropId].qty += commonDrop.qty;\n          }\n        }\n\n        let bossDropList = JSON.parse(JSON.stringify(rowData[\"Ascension\"].filter(i => i.type == \"item-boss-drop\")));\n\n        for (let bossDrop of rowData[\"Talent\"].filter(e => e.type == \"item-boss-drop\")) {\n          let bossDropId = bossDropList.findIndex(l => l.name == bossDrop.name);\n\n          if (bossDropId == -1) {\n            bossDropList.push(JSON.parse(JSON.stringify(bossDrop)));\n          } else {\n            bossDropList[bossDropId].qty += bossDrop.qty;\n          }\n        }\n\n        this.totalsData.push({\n          \"Exp\": JSON.parse(JSON.stringify(rowData[\"Exp\"])),\n          \"Gems\": JSON.parse(JSON.stringify(rowData[\"Ascension\"].filter(i => i.type == \"item-gem\"))),\n          \"Local Specialties\": JSON.parse(JSON.stringify(rowData[\"Ascension\"].filter(i => i.type == \"item-local-specialty\"))),\n          \"Common Drops\": commonDropList,\n          \"Boss Drops\": bossDropList,\n          \"Domain Drops\": JSON.parse(JSON.stringify(rowData[\"Talent\"].filter(i => i.type == \"item-domain\"))),\n          \"Limited\": JSON.parse(JSON.stringify(rowData[\"Talent\"].filter(i => i.type == \"item-limited\"))),\n          \"Mora\": [{\n            name: rowData[\"Exp Mora\"][0].name,\n            path: rowData[\"Exp Mora\"][0].path,\n            qty: (rowData[\"Exp Mora\"].length == 0 ? 0 : rowData[\"Exp Mora\"][0].qty) + (rowData[\"Ascension Mora\"].length == 0 ? 0 : rowData[\"Ascension Mora\"][0].qty) + (rowData[\"Talent Mora\"].length == 0 ? 0 : rowData[\"Talent Mora\"][0].qty)\n          }]\n        });\n      } else {\n        let expList = this.totalsData[0][\"Exp\"];\n\n        for (let expItem of rowData[\"Exp\"]) {\n          let expId = expList.findIndex(e => e.name == expItem.name);\n\n          if (expId == -1) {\n            expList.push(JSON.parse(JSON.stringify(expItem)));\n          } else {\n            expList[expId].qty += expItem.qty;\n          }\n        }\n\n        this.totalsData[0][\"Exp\"] = expList;\n        this.totalsData[0][\"Mora\"] = this.totalsData[0][\"Mora\"].map(d => ({\n          name: d.name,\n          path: d.path,\n          qty: d.qty + (rowData[\"Exp Mora\"].length == 0 ? 0 : rowData[\"Exp Mora\"][0].qty) + (rowData[\"Ascension Mora\"].length == 0 ? 0 : rowData[\"Ascension Mora\"][0].qty) + (rowData[\"Talent Mora\"].length == 0 ? 0 : rowData[\"Talent Mora\"][0].qty)\n        }));\n        let gemList = this.totalsData[0][\"Gems\"];\n\n        for (let gem of rowData[\"Ascension\"].filter(e => e.type == \"item-gem\")) {\n          let gemId = gemList.findIndex(g => g.name == gem.name);\n\n          if (gemId == -1) {\n            gemList.push(JSON.parse(JSON.stringify(gem)));\n          } else {\n            gemList[gemId].qty += gem.qty;\n          }\n        }\n\n        this.totalsData[0][\"Gems\"] = gemList;\n        let localSpecialtyList = this.totalsData[0][\"Local Specialties\"];\n\n        for (let localSpecialty of rowData[\"Ascension\"].filter(e => e.type == \"item-local-specialty\")) {\n          let localSpecialtyId = localSpecialtyList.findIndex(l => l.name == localSpecialty.name);\n\n          if (localSpecialtyId == -1) {\n            localSpecialtyList.push(JSON.parse(JSON.stringify(localSpecialty)));\n          } else {\n            localSpecialtyList[localSpecialtyId].qty += localSpecialty.qty;\n          }\n        }\n\n        this.totalsData[0][\"Local Specialties\"] = localSpecialtyList;\n        let commonDropList = this.totalsData[0][\"Common Drops\"];\n\n        for (let commonDrop of rowData[\"Ascension\"].filter(e => e.type == \"item-common-drop\")) {\n          let commonDropId = commonDropList.findIndex(l => l.name == commonDrop.name);\n\n          if (commonDropId == -1) {\n            commonDropList.push(JSON.parse(JSON.stringify(commonDrop)));\n          } else {\n            commonDropList[commonDropId].qty += commonDrop.qty;\n          }\n        }\n\n        for (let commonDrop of rowData[\"Talent\"].filter(e => e.type == \"item-common-drop\")) {\n          let commonDropId = commonDropList.findIndex(l => l.name == commonDrop.name);\n\n          if (commonDropId == -1) {\n            commonDropList.push(JSON.parse(JSON.stringify(commonDrop)));\n          } else {\n            commonDropList[commonDropId].qty += commonDrop.qty;\n          }\n        }\n\n        this.totalsData[0][\"Common Drops\"] = commonDropList;\n        let bossDropList = this.totalsData[0][\"Boss Drops\"];\n\n        for (let bossDrop of rowData[\"Ascension\"].filter(e => e.type == \"item-boss-drop\")) {\n          let bossDropId = bossDropList.findIndex(l => l.name == bossDrop.name);\n\n          if (bossDropId == -1) {\n            bossDropList.push(JSON.parse(JSON.stringify(bossDrop)));\n          } else {\n            bossDropList[bossDropId].qty += bossDrop.qty;\n          }\n        }\n\n        for (let bossDrop of rowData[\"Talent\"].filter(e => e.type == \"item-boss-drop\")) {\n          let bossDropId = bossDropList.findIndex(l => l.name == bossDrop.name);\n\n          if (bossDropId == -1) {\n            bossDropList.push(JSON.parse(JSON.stringify(bossDrop)));\n          } else {\n            bossDropList[bossDropId].qty += bossDrop.qty;\n          }\n        }\n\n        this.totalsData[0][\"Boss Drops\"] = bossDropList;\n        let bookList = this.totalsData[0][\"Domain Drops\"];\n\n        for (let book of rowData[\"Talent\"].filter(e => e.type == \"item-domain\")) {\n          let bookId = bookList.findIndex(l => l.name == book.name);\n\n          if (bookId == -1) {\n            bookList.push(JSON.parse(JSON.stringify(book)));\n          } else {\n            bookList[bookId].qty += book.qty;\n          }\n        }\n\n        this.totalsData[0][\"Book\"] = bookList;\n        let limitedList = this.totalsData[0][\"Limited\"];\n\n        for (let limited of rowData[\"Talent\"].filter(e => e.type == \"item-limited\")) {\n          let limitedId = limitedList.findIndex(l => l.name == limited.name);\n\n          if (limitedId == -1) {\n            limitedList.push(JSON.parse(JSON.stringify(limited)));\n          } else {\n            limitedList[limitedId].qty += limited.qty;\n          }\n        }\n\n        this.totalsData[0][\"Limited\"] = limitedList;\n      }\n\n      this.totalsData[0][\"Exp\"] = this.sortItem(this.totalsData[0][\"Exp\"]);\n      this.totalsData[0][\"Gems\"] = this.sortItem(this.totalsData[0][\"Gems\"]);\n      this.totalsData[0][\"Common Drops\"] = this.sortItem(this.totalsData[0][\"Common Drops\"]);\n      this.totalsData[0][\"Boss Drops\"] = this.sortItem(this.totalsData[0][\"Boss Drops\"]);\n      this.totalsData[0][\"Domain Drops\"] = this.sortItem(this.totalsData[0][\"Domain Drops\"]);\n    }\n    /**\r\n     * Generates the total items required\r\n     * @param char Character for whom the total is being calculated\r\n     */\n\n\n    calcWeaponTotals(char) {\n      let rowData = this.tableData.filter(d => d.Name == char.name)[0];\n      let expList = this.totalsData[0][\"Exp\"];\n\n      for (let expItem of rowData[\"Weapon Exp\"]) {\n        let expId = expList.findIndex(e => e.name == expItem.name);\n\n        if (expId == -1) {\n          expList.push(JSON.parse(JSON.stringify(expItem)));\n        } else {\n          expList[expId].qty += expItem.qty;\n        }\n      }\n\n      this.totalsData[0][\"Exp\"] = expList;\n      this.totalsData[0][\"Mora\"] = this.totalsData[0][\"Mora\"].map(d => ({\n        name: d.name,\n        path: d.path,\n        qty: d.qty + (rowData[\"Weapon Exp Mora\"].length == 0 ? 0 : rowData[\"Weapon Exp Mora\"][0].qty) + (rowData[\"Weapon Ascension Mora\"].length == 0 ? 0 : rowData[\"Weapon Ascension Mora\"][0].qty)\n      }));\n      let commonDropList = this.totalsData[0][\"Common Drops\"];\n\n      for (let commonDrop of rowData[\"Weapon Ascension\"].filter(e => e.type == \"item-common-drop\")) {\n        let commonDropId = commonDropList.findIndex(l => l.name == commonDrop.name);\n\n        if (commonDropId == -1) {\n          commonDropList.push(JSON.parse(JSON.stringify(commonDrop)));\n        } else {\n          commonDropList[commonDropId].qty += commonDrop.qty;\n        }\n      }\n\n      this.totalsData[0][\"Common Drops\"] = commonDropList;\n      let relicList = this.totalsData[0][\"Domain Drops\"];\n\n      for (let relic of rowData[\"Weapon Ascension\"].filter(e => e.type == \"item-domain\")) {\n        let relicId = relicList.findIndex(l => l.name == relic.name);\n\n        if (relicId == -1) {\n          relicList.push(JSON.parse(JSON.stringify(relic)));\n        } else {\n          relicList[relicId].qty += relic.qty;\n        }\n      }\n\n      this.totalsData[0][\"Domain Drop\"] = relicList;\n      this.totalsData[0][\"Exp\"] = this.sortItem(this.totalsData[0][\"Exp\"]);\n      this.totalsData[0][\"Common Drops\"] = this.sortItem(this.totalsData[0][\"Common Drops\"]);\n      this.totalsData[0][\"Domain Drops\"] = this.sortItem(this.totalsData[0][\"Domain Drops\"]);\n    }\n    /**\r\n     * Sorts a list of items by rarity\r\n     * @param list\r\n     */\n\n\n    sortItem(list) {\n      list.sort((a, b) => {\n        if (this.qualityOrder.indexOf(a.qly) < this.qualityOrder.indexOf(b.qly)) return -1;else if (this.qualityOrder.indexOf(a.qly) > this.qualityOrder.indexOf(b.qly)) return 1;else return 0;\n      });\n      list.sort((a, b) => {\n        if (this.tagOrder.indexOf(a.tag) < this.tagOrder.indexOf(b.tag)) return -1;else if (this.tagOrder.indexOf(a.tag) > this.tagOrder.indexOf(b.tag)) return 1;else return 0;\n      });\n      return list;\n    }\n\n  }\n\n  MatTableComponent.ɵfac = function MatTableComponent_Factory(t) {\n    return new (t || MatTableComponent)(i0.ɵɵdirectiveInject(i1.NumberFormatPipeModule), i0.ɵɵdirectiveInject(i2.EnvironmentPathService));\n  };\n\n  MatTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MatTableComponent,\n    selectors: [[\"app-mat-table\"]],\n    inputs: {\n      characters: \"characters\",\n      levelUpData: \"levelUpData\",\n      ascensionData: \"ascensionData\",\n      talentData: \"talentData\",\n      charData: \"charData\",\n      weaponData: \"weaponData\",\n      weaponLevelUpData: \"weaponLevelUpData\",\n      weaponAscensionData: \"weaponAscensionData\",\n      itemQualityData: \"itemQualityData\",\n      change: \"change\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 25,\n    vars: 8,\n    consts: [[1, \"options-container\", 3, \"ngClass\"], [\"tableOptions\", \"ngForm\"], [1, \"table-options\"], [1, \"table-option\"], [1, \"form-check\", \"form-switch\"], [\"for\", \"weaponDisplay\", 1, \"form-check-label\"], [\"type\", \"checkbox\", \"id\", \"weaponDisplay\", 1, \"form-check-input\", 3, \"checked\", \"click\"], [\"for\", \"rarityDisplay\", 1, \"form-check-label\"], [\"type\", \"checkbox\", \"id\", \"rarityDisplay\", 1, \"form-check-input\", 3, \"checked\", \"click\"], [\"for\", \"totalsDisplay\", 1, \"form-check-label\"], [\"type\", \"checkbox\", \"id\", \"totalsDisplay\", 1, \"form-check-input\", 3, \"checked\", \"click\"], [1, \"table\", \"white\", 3, \"ngClass\"], [\"scope\", \"col\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"table white\", 3, \"ngClass\", 4, \"ngIf\"], [\"scope\", \"col\"], [\"class\", \"\", 4, \"ngFor\", \"ngForOf\"], [1, \"\"], [4, \"ngIf\"], [\"class\", \"items-row\", 4, \"ngFor\", \"ngForOf\"], [1, \"items-row\"], [3, \"ngClass\"], [1, \"item-holder\", 3, \"ngClass\"], [1, \"item-single\", 3, \"src\", \"alt\", \"title\"], [1, \"item-qty\"], [\"class\", \"maxed\", 4, \"ngIf\"], [1, \"maxed\"]],\n    template: function MatTableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0, 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"label\", 5);\n        i0.ɵɵtext(6, \" Weapons \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"input\", 6);\n        i0.ɵɵlistener(\"click\", function MatTableComponent_Template_input_click_7_listener() {\n          return ctx.toggle(\"weapon\");\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(8, \"div\", 3)(9, \"div\", 4)(10, \"label\", 7);\n        i0.ɵɵtext(11, \" Rarity \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 8);\n        i0.ɵɵlistener(\"click\", function MatTableComponent_Template_input_click_12_listener() {\n          return ctx.toggle(\"rarity\");\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(13, \"div\", 3)(14, \"div\", 4)(15, \"label\", 9);\n        i0.ɵɵtext(16, \" Totals \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"input\", 10);\n        i0.ɵɵlistener(\"click\", function MatTableComponent_Template_input_click_17_listener() {\n          return ctx.toggle(\"totals\");\n        });\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(18, \"table\", 11);\n        i0.ɵɵelement(19, \"caption\");\n        i0.ɵɵelementStart(20, \"thead\");\n        i0.ɵɵtemplate(21, MatTableComponent_th_21_Template, 2, 1, \"th\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"tbody\");\n        i0.ɵɵtemplate(23, MatTableComponent_tr_23_Template, 2, 1, \"tr\", 13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(24, MatTableComponent_table_24_Template, 6, 3, \"table\", 14);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", ctx.displayWeapon ? \"weapon-size\" : \"\");\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"checked\", ctx.displayWeapon);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"checked\", ctx.displayRarity);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"checked\", ctx.displayTotals);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", ctx.displayWeapon ? \"weapon-size\" : \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.displayedColumns);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.tableData);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.displayTotals);\n      }\n    },\n    directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.NgForm, i4.NgClass, i4.NgForOf, i4.NgIf],\n    pipes: [i5.NumberFormatPipe],\n    styles: [\".options-container[_ngcontent-%COMP%]{height:26px}.items-row[_ngcontent-%COMP%]{display:inline-block}.item-exp[_ngcontent-%COMP%], .item-gem[_ngcontent-%COMP%], .item-common-drop[_ngcontent-%COMP%], .item-boss-drop[_ngcontent-%COMP%], .item-domain[_ngcontent-%COMP%], .item-limited[_ngcontent-%COMP%], .item-local-specialty[_ngcontent-%COMP%], .weapon-exp[_ngcontent-%COMP%], .item-domain-drop[_ngcontent-%COMP%]{width:50px}.item-holder[_ngcontent-%COMP%]{height:50px;width:50px;position:relative;margin:0 auto}.item-single[_ngcontent-%COMP%]{max-height:50px;max-width:50px;display:block;margin:auto;position:absolute;top:0;right:0;bottom:0;left:0}.item-qty[_ngcontent-%COMP%]{font-size:.8rem;white-space:nowrap}tr[_ngcontent-%COMP%]:nth-child(even){background:#2125298c}.grey[_ngcontent-%COMP%]{background-image:radial-gradient(circle,rgba(255,255,255,.4),#7b827b)}.green[_ngcontent-%COMP%]{background-image:radial-gradient(circle,rgba(255,255,255,.4),#5a8a7e)}.blue[_ngcontent-%COMP%]{background-image:radial-gradient(circle,rgba(255,255,255,.4),#5a789a)}.purple[_ngcontent-%COMP%]{background-image:radial-gradient(circle,rgba(255,255,255,.4),#716798)}.gold[_ngcontent-%COMP%]{background-image:radial-gradient(circle,rgba(255,255,255,.4),#986426)}td[_ngcontent-%COMP%]   .maxed[_ngcontent-%COMP%]{background-color:gray}.form-check[_ngcontent-%COMP%], .form-switch[_ngcontent-%COMP%]{padding-left:0}label.form-check-label[_ngcontent-%COMP%]{float:left;margin-right:.5rem}.form-switch[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%]{margin-right:0}.form-check[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%]{float:none;margin-left:0}.form-check-input[_ngcontent-%COMP%]:checked{background-color:#8f9091;border-color:#8f9091}.form-check-input[_ngcontent-%COMP%]:focus{border-color:#8f9091;box-shadow:0 0 0 .25rem #ffffff40}.weapon-size[_ngcontent-%COMP%]{width:150%!important}\"]\n  });\n  return MatTableComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}