{"ast":null,"code":"import LZUTF8 from \"lzutf8\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nexport let CookieStorageService = /*#__PURE__*/(() => {\n  class CookieStorageService {\n    constructor(cookieService) {\n      this.cookieService = cookieService;\n    }\n\n    set(key, text) {\n      if (key == \"c\") {\n        let keys = this.cookieService.get(\"c\");\n        let oldKeyList = [];\n\n        if (keys != null && keys != \"\") {\n          oldKeyList = JSON.parse(keys);\n        }\n\n        let keyList = [];\n        let remaining = LZUTF8.compress(JSON.stringify(text), {\n          outputEncoding: \"Base64\"\n        });\n        let encoded = encodeURIComponent(remaining);\n\n        for (let i = 1; remaining.length > 0 && i < 10; i++) {\n          let encodedLength = 4080;\n          let decodedLength = 0;\n          let part = encoded.slice(0, encodedLength);\n\n          while (part.length > 0) {\n            try {\n              let decoded = decodeURIComponent(part);\n              decodedLength = decoded.length;\n              break;\n            } catch (_a) {\n              encodedLength--;\n              part = encoded.slice(0, encodedLength);\n            }\n          }\n\n          this.cookieService.set(\"c\" + i, remaining.slice(0, decodedLength));\n          keyList.push(\"c\" + i);\n          remaining = remaining.slice(decodedLength);\n        }\n\n        for (let k of oldKeyList) {\n          if (!keyList.includes(k)) this.cookieService.delete(k);\n        }\n\n        this.cookieService.set(\"c\", JSON.stringify(keyList));\n\n        if (remaining.length > 0) {\n          this.delete(\"c\");\n          console.log(\"Data too large to be stored.\");\n        }\n      } else {\n        this.cookieService.set(key, text);\n      }\n    }\n\n    get(key) {\n      if (key == \"c\") {\n        let keys = this.cookieService.get(\"c\");\n\n        if (keys == null || keys == \"\") {\n          return \"\";\n        } else {\n          let keyList = JSON.parse(keys);\n          let result = \"\";\n\n          for (let k of keyList) {\n            result += this.cookieService.get(k);\n          }\n\n          return JSON.parse(LZUTF8.decompress(result, {\n            inputEncoding: \"Base64\"\n          }));\n        }\n      } else {\n        return this.cookieService.get(key);\n      }\n    }\n\n    delete(key) {\n      if (key == \"c\") {\n        let keys = this.cookieService.get(\"c\");\n\n        if (keys == null || keys == \"\") {\n          return;\n        } else {\n          let keyList = JSON.parse(keys);\n\n          for (let k of keyList) {\n            this.cookieService.delete(k);\n          }\n\n          this.cookieService.delete(\"c\");\n        }\n      } else {\n        this.cookieService.delete(key);\n      }\n    }\n\n  }\n\n  CookieStorageService.ɵfac = function CookieStorageService_Factory(t) {\n    return new (t || CookieStorageService)(i0.ɵɵinject(i1.CookieService));\n  };\n\n  CookieStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CookieStorageService,\n    factory: CookieStorageService.ɵfac,\n    providedIn: \"root\"\n  });\n  return CookieStorageService;\n})();","map":null,"metadata":{},"sourceType":"module"}